//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "order")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub status: String,
    pub account_id: Option<i32>,
    pub email: String,
    pub billing_address_id: i32,
    pub shipping_address_id: i32,
    pub transaction_id: Option<String>,
    pub card_type: Option<String>,
    pub card_last4: Option<String>,
    pub tax_amount: Decimal,
    pub shipping_amount: Decimal,
    pub total_amount: Decimal,
    pub creation_date: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::AccountId",
        to = "super::account::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Account,
    #[sea_orm(
        belongs_to = "super::address::Entity",
        from = "Column::BillingAddressId",
        to = "super::address::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Address2,
    #[sea_orm(
        belongs_to = "super::address::Entity",
        from = "Column::ShippingAddressId",
        to = "super::address::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Address1,
    #[sea_orm(has_many = "super::order_attribute::Entity")]
    OrderAttribute,
    #[sea_orm(has_many = "super::order_item::Entity")]
    OrderItem,
    #[sea_orm(has_many = "super::order_note::Entity")]
    OrderNote,
}

impl Related<super::account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Account.def()
    }
}

impl Related<super::order_attribute::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderAttribute.def()
    }
}

impl Related<super::order_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderItem.def()
    }
}

impl Related<super::order_note::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderNote.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
